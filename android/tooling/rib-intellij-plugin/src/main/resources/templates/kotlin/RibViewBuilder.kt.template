package ${package_name}

import android.view.LayoutInflater
import android.view.ViewGroup
import com.uber.rib.core.InteractorBaseComponent
import com.uber.rib.core.ViewBuilder

/**
 * Builder for the [${rib_name}Scope].
 *
 * TODO describe this scope's responsibility as a whole.
 */
class ${rib_name}Builder(
  dependency: ParentScope
) : ViewBuilder<${rib_name}View, ${rib_name}Router, ${rib_name}Builder.ParentScope>(dependency) {

  /**
   * Builds a new [${rib_name}Router].
   *
   * @param parentViewGroup parent view group that this router's view will be added to.
   * @return a new [${rib_name}Router].
   */
  fun build(parentViewGroup: ViewGroup): ${rib_name}Router {
    val view = createView(parentViewGroup)
    return dependency.${rib_name_to_lower}Scope(view).${rib_name_to_lower}Router()
  }

  override fun inflateView(inflater: LayoutInflater, parentViewGroup: ViewGroup): ${rib_name}View =
    inflater.inflate(R.layout.view_${rib_name_to_snake}, parentViewGroup, false) as ${rib_name}View

  interface ParentScope {
    // TODO: Define dependencies required from your parent interactor here.
    fun ${rib_name_to_lower}Scope(view: ${rib_name}View): ${rib_name}Scope
  }

  @motif.Scope
  interface ${rib_name}Scope : BuilderComponent {

    @motif.Objects
    abstract class Objects {

      abstract fun interactor(): ${rib_name}Interactor

      abstract fun presenter(view: ${rib_name}View): ${rib_name}Interactor.${rib_name}Presenter

      fun router(
        scope: ${rib_name}Scope,
        view: ${rib_name}View,
        interactor: ${rib_name}Interactor
      ): ${rib_name}Router = ${rib_name}Router(view, interactor, scope)

      // TODO: Create provider methods for dependencies created by this Rib.
    }

  }

  interface BuilderComponent {
    fun ${rib_name_to_lower}Router(): ${rib_name}Router
  }
}
