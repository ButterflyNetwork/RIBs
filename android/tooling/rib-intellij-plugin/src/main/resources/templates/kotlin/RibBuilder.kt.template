package ${package_name}

import com.uber.rib.core.Builder
import com.uber.rib.core.EmptyPresenter

class ${rib_name}Builder(
  dependency: ParentScope
) : Builder<${rib_name}Router, ${rib_name}Builder.ParentScope>(dependency) {

  /**
   * Builds a new [${rib_name}Router].
   *
   * @return a new [${rib_name}Router].
   */
  fun build(): ${rib_name}Router {
    return dependency.${rib_name_to_lower}Router()
  }

  interface ParentScope {
    // TODO: Define dependencies required from your parent interactor here.
    fun ${rib_name_to_lower}Scope(): Scope
  }

  @motif.Scope
  interface Scope : BuilderComponent {

    @motif.Objects
    abstract class Objects {
      abstract fun interactor(): ${rib_name}Interactor

      abstract fun presenter(): EmptyPresenter

      fun router(
        scope: Scope,
        interactor: ${rib_name}Interactor
      ) : ${rib_name}Router = ${rib_name}Router(interactor, scope)

      // TODO: Create provider methods for dependencies created by this Rib.
    }

  }

  interface BuilderComponent {
    fun ${rib_name_to_lower}(): ${rib_name}Router
  }

}
